# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="agnoster" # set by `omz`
ZSH_THEME="powerlevel10k/powerlevel10k"
# ZSH_THEME="dracula-pro"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
#   git
  z
  extract
  vscode
  python
  golang
  aws
  docker
  # poetry
  zsh-osx-autoproxy
)

source $ZSH/oh-my-zsh.sh  # launch oh-my-zsh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
alias zshconfig="vim ~/.zshrc"
alias ohmyzsh="code ~/.oh-my-zsh"

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>> Personal Settings Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Plugins
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Aliases
# alias aws='docker run --rm -it -v ~/.aws:/root/.aws -v $(pwd):/aws public.ecr.aws/aws-cli/aws-cli'
alias ls='ls --color=auto'
alias icloud="cd '/Users/xiao/Library/Mobile Documents/com~apple~CloudDocs'"
alias note="code '/Users/xiao/Library/Mobile Documents/iCloud~app~cyan~taio/Documents/Editor'"
alias down="cd ~/Downloads"
alias work="cd ~/Workspace"

AI="/Users/xiao/Workspace/Lab/AI"

alias chatgpt="$AI/ChatGPT/chatgpt.py"
alias gemini="$AI/Gemini/gemini.py"
alias llama="$AI/Llama-2/llama-2.py"
alias deepl="$AI/DeepL/main.py"

alias trans="chatgpt translate"
alias trans2="gemini translate"
alias trans3="deepl text"
alias debug="chatgpt debug"

alias ccman="$AI/ChatGPT/ccman.sh"
alias ccman2="$AI/Gemini/ccman.sh"
alias ccman3="$AI/DeepL/main.py manual"
alias ccman4="$AI/YouDao/main.py"

alias python="python3"
alias python-config="python3-config"
alias pip="pip3"
alias vim="nvim"
alias ts-node="npx ts-node"
alias prettier="npx prettier"

# Functions
function venv {
    if [ -d ".venv" ]; then
        # 如果 .venv 目录存在，激活虚拟环境
        source .venv/bin/activate
    else
        # 如果 .venv 目录不存在，创建并激活虚拟环境
        python3 -m venv .venv
        if [ $? -eq 0 ]; then
            source .venv/bin/activate
        else
            echo "Failed to create virtual environment. Please check if Python 3 and the venv module are installed."
        fi
    fi
}

# Sources
MY_BIN="/Users/xiao/Workspace/bin"
source $MY_BIN/man

# 你可能需要先添加执行权限：
# chmod u+x "$ZSH_CUSTOM/plugins/zsh-osx-autoproxy/zsh-osx-autoproxy.plugin.zsh"
alias proxy="$ZSH_CUSTOM/plugins/zsh-osx-autoproxy/zsh-osx-autoproxy.plugin.zsh"
alias unproxy="unset http_proxy https_proxy all_proxy HTTP_PROXY HTTPS_PROXY ALL_PROXY; echo 'Proxy off'"

# AVD
alias AVD="/Users/xiao/Library/Android/sdk/emulator/emulator -avd Pixel_6_Pro_API_33"


# 环境变量
export PATH="$MY_BIN:$PATH"
export JAVA_HOME=$(brew --prefix openjdk)/libexec/openjdk.jdk/Contents/Home

## 设置语言
# export \
#     LANGUAGE="zh_CN.UTF-8" \
#     LC_ALL="zh_CN.UTF-8" \
#     LC_TIME="zh_CN.UTF-8" \
#     LC_CTYPE="zh_CN.UTF-8" \
#     LC_MONETARY="zh_CN.UTF-8" \
#     LC_COLLATE="zh_CN.UTF-8" \
#     LC_ADDRESS="zh_CN.UTF-8" \
#     LC_TELEPHONE="zh_CN.UTF-8" \
#     LC_MESSAGES="zh_CN.UTF-8" \
#     LC_NAME="zh_CN.UTF-8" \
#     LC_MEASUREMENT="zh_CN.UTF-8" \
#     LC_IDENTIFICATION="zh_CN.UTF-8" \
#     LC_NUMERIC="zh_CN.UTF-8" \
#     LC_PAPER="zh_CN.UTF-8" \
#     LANG="zh_CN.UTF-8"


## 设置 homebrew 镜像源
export HOMEBREW_API_DOMAIN="https://mirrors.ustc.edu.cn/homebrew-bottles/api"  # 设置 Homebrew 的 API 域名
export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.ustc.edu.cn/homebrew-bottles"  # 设置 Homebrew 的预编译二进制包的下载域名
export HOMEBREW_PIP_INDEX_URL="https://mirrors.ustc.edu.cn/pypi/web/simple"  # 设置 Homebrew 中使用的 Python 包管理器 pip 的索引 URL

## 隐藏 brew cleanup 提示
export HOMEBREW_NO_ENV_HINTS=1

# Go 模块安装路径
export GOPATH="$HOME/go"
export GOROOT="$(brew --prefix golang)/libexec"
export PATH="$PATH:$GOPATH/bin"  # 将 GOPATH/bin 添加到 PATH 以进行脚本执行

export GITHUB_USERNAME="Undefined443"

# PATH

## 使用 GNU 版本的 sed
PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"

## 使用 GUN 版本的 make
PATH="/opt/homebrew/opt/make/libexec/gnubin:$PATH"

## 使用 GNU 版本的 grep
PATH="/opt/homebrew/opt/grep/libexec/gnubin:$PATH"

## 使用 GNU 版本的 coreutils (head, realpath, ls)
PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH"

## 使用 GNU 版本的 man
PATH="/opt/homebrew/opt/man-db/libexec/bin:$PATH"

## 使用 GNU 版本的 find
PATH="/opt/homebrew/opt/findutils/libexec/gnubin:$PATH"

# <<<<<<<<<<<<<<<<<<<<<<<<<<<<< Personal Settings End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>>>>>> Program Requirements Start >>>>>>>>>>>>>>>>>>>>>>>>>>>>

# >>>>>>>>>>>>>>>>>>>>> Java(Homebrew) Begin >>>>>>>>>>>>>>>>>>>>>
## If you need to have openjdk first in your PATH, run:
export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
## For compilers to find openjdk you may need to set:
export CPPFLAGS="-I/opt/homebrew/opt/openjdk/include"
# <<<<<<<<<<<<<<<<<<<<< Java(Homebrew) End <<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>> curl(Homebrew) Begin >>>>>>>>>>>>>>>>>>>>>
# If you need to have curl first in your PATH, run:
export PATH="/opt/homebrew/opt/curl/bin:$PATH"

# For compilers to find curl you may need to set:
export LDFLAGS="-L/opt/homebrew/opt/curl/lib"
export CPPFLAGS="-I/opt/homebrew/opt/curl/include"

# For pkg-config to find curl you may need to set:
export PKG_CONFIG_PATH="/opt/homebrew/opt/curl/lib/pkgconfig"
# <<<<<<<<<<<<<<<<<<<<< curl(Homebrew) End <<<<<<<<<<<<<<<<<<<<<


# <<<<<<<<<<<<<<<<<<<<< MATLAB Begin <<<<<<<<<<<<<<<<<<<<<
export PATH="/Applications/MATLAB_R2024a.app/bin:$PATH"
# export MATLAB_JAVA="/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home"
# <<<<<<<<<<<<<<<<<<<<< MATLAB End <<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> binutils Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# If you need to have binutils first in your PATH, run:
export PATH="/opt/homebrew/opt/binutils/bin:$PATH"

# For compilers to find binutils you may need to set:
export LDFLAGS="-L/opt/homebrew/opt/binutils/lib"
export CPPFLAGS="-I/opt/homebrew/opt/binutils/include"
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< binutils End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>>>>>> Node Version Manager Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
# <<<<<<<<<<<<<<<<<<<<<<<<<<<< Node Version Manager End <<<<<<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>>>>>> pipx Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>
# pipx 自动补全
autoload -U bashcompinit
bashcompinit
eval "$(register-python-argcomplete pipx)"
# <<<<<<<<<<<<<<<<<<<<<<<<<<<< pipx End <<<<<<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> autojump Begin >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Add the following line to your ~/.bash_profile or ~/.zshrc file:
[ -f /opt/homebrew/etc/profile.d/autojump.sh ] && . /opt/homebrew/etc/profile.d/autojump.sh

# If you use the Fish shell then add the following line to your ~/.config/fish/config.fish:
# [ -f /opt/homebrew/share/autojump/autojump.fish ]; and source /opt/homebrew/share/autojump/autojump.fish
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< autojump End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>> Conda Begin >>>>>>>>>>>>>>>>>>>>>
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/Caskroom/miniconda/base/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/Caskroom/miniconda/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

conda activate py311
# >>>>>>>>>>>>>>>>>>>>> Conda End >>>>>>>>>>>>>>>>>>>>>


# >>>>>>>>>>>>>>>>>>>>> Ruby Begin >>>>>>>>>>>>>>>>>>>>>
# have ruby first in the PATH
export PATH="/opt/homebrew/opt/ruby/bin:$PATH"

# For compilers to find ruby
export LDFLAGS="-L/opt/homebrew/opt/ruby/lib"
export CPPFLAGS="-I/opt/homebrew/opt/ruby/include"

# For pkg-config to find ruby
export PKG_CONFIG_PATH="/opt/homebrew/opt/ruby/lib/pkgconfig"
# >>>>>>>>>>>>>>>>>>>>> Conda End >>>>>>>>>>>>>>>>>>>>>

# >>>>>>>>>>>>>>>>>>>>> powerline10k Begin >>>>>>>>>>>>>>>>>>>>>
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
# >>>>>>>>>>>>>>>>>>>>> powerline10k End >>>>>>>>>>>>>>>>>>>>>

# <<<<<<<<<<<<<<<<<<<<<<<<<<<< Program Requirements End <<<<<<<<<<<<<<<<<<<<<<<<<<<<

autoload -U +X compinit && compinit -i
autoload -U +X bashcompinit && bashcompinit -i
